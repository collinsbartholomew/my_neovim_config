{
	"React Functional Component": {
		"prefix": "rfc",
		"body": [
			"import React from 'react';",
			"",
			"interface ${1:ComponentName}Props {",
			"  $2",
			"}",
			"",
			"const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ $3 }) => {",
			"  return (",
			"    <div className=\"$4\">",
			"      $0",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "React functional component with TypeScript"
	},
	"useState Hook": {
		"prefix": "us",
		"body": [
			"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialValue});"
		],
		"description": "useState hook with TypeScript"
	},
	"useEffect Hook": {
		"prefix": "ue",
		"body": ["useEffect(() => {", "  $1", "}, [${2:dependencies}]);"],
		"description": "useEffect hook"
	},
	"Next.js API Route": {
		"prefix": "napi",
		"body": [
			"import { NextApiRequest, NextApiResponse } from 'next';",
			"",
			"export default async function handler(",
			"  req: NextApiRequest,",
			"  res: NextApiResponse",
			") {",
			"  if (req.method === '${1:GET}') {",
			"    try {",
			"      $2",
			"      res.status(200).json({ $3 });",
			"    } catch (error) {",
			"      res.status(500).json({ error: 'Internal Server Error' });",
			"    }",
			"  } else {",
			"    res.setHeader('Allow', ['${1:GET}']);",
			"    res.status(405).end(`Method ${req.method} Not Allowed`);",
			"  }",
			"}"
		],
		"description": "Next.js API route handler"
	}
}

