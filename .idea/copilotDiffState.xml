<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/init.lua">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/init.lua" />
              <option name="originalContent" value="-- Bootstrap lazy.nvim&#10;local lazypath = vim.fn.stdpath(&quot;data&quot;) .. &quot;/lazy/lazy.nvim&quot;&#10;if not vim.loop.fs_stat(lazypath) then&#10;  vim.fn.system({&#10;    &quot;git&quot;,&#10;    &quot;clone&quot;,&#10;    &quot;--filter=blob:none&quot;,&#10;    &quot;https://github.com/folke/lazy.nvim.git&quot;,&#10;    &quot;--branch=stable&quot;,&#10;    lazypath,&#10;  })&#10;end&#10;vim.opt.rtp:prepend(lazypath)&#10;&#10;-- Load and initialize lazy&#10;require(&quot;lazy&quot;).setup(&quot;profile.lazy.plugins&quot;, {&#10;  install = {&#10;    colorscheme = { &quot;tokyonight&quot; },&#10;  },&#10;  performance = {&#10;    rtp = {&#10;      disabled_plugins = {&#10;        &quot;gzip&quot;,&#10;        &quot;matchit&quot;,&#10;        &quot;matchparen&quot;,&#10;        &quot;netrwPlugin&quot;,&#10;        &quot;tarPlugin&quot;,&#10;        &quot;tohtml&quot;,&#10;        &quot;tutor&quot;,&#10;        &quot;zipPlugin&quot;,&#10;      },&#10;    },&#10;  },&#10;})&#10;&#10;-- Set a default colorscheme that we know exists&#10;vim.cmd([[colorscheme tokyonight]])&#10;&#10;-- Neovim bootstrap: load modular profile config&#10;pcall(require, 'profile')&#10;" />
              <option name="updatedContent" value="-- Set leader key BEFORE loading any plugins&#10;vim.g.mapleader = &quot; &quot;&#10;vim.g.maplocalleader = &quot; &quot;&#10;&#10;-- Basic options that should be set before plugins&#10;vim.opt.termguicolors = true&#10;vim.opt.background = &quot;dark&quot;&#10;&#10;-- Bootstrap lazy.nvim&#10;local lazypath = vim.fn.stdpath(&quot;data&quot;) .. &quot;/lazy/lazy.nvim&quot;&#10;if not vim.loop.fs_stat(lazypath) then&#10;  vim.fn.system({&#10;    &quot;git&quot;,&#10;    &quot;clone&quot;,&#10;    &quot;--filter=blob:none&quot;,&#10;    &quot;https://github.com/folke/lazy.nvim.git&quot;,&#10;    &quot;--branch=stable&quot;,&#10;    lazypath,&#10;  })&#10;end&#10;vim.opt.rtp:prepend(lazypath)&#10;&#10;-- Load and initialize lazy&#10;require(&quot;lazy&quot;).setup(&quot;profile.lazy.plugins&quot;, {&#10;  install = {&#10;    colorscheme = { &quot;tokyonight&quot; },&#10;  },&#10;  change_detection = {&#10;    notify = false,&#10;  },&#10;  performance = {&#10;    rtp = {&#10;      disabled_plugins = {&#10;        &quot;gzip&quot;,&#10;        &quot;matchit&quot;,&#10;        &quot;matchparen&quot;,&#10;        &quot;netrwPlugin&quot;,&#10;        &quot;tarPlugin&quot;,&#10;        &quot;tohtml&quot;,&#10;        &quot;tutor&quot;,&#10;        &quot;zipPlugin&quot;,&#10;      },&#10;    },&#10;  },&#10;})&#10;&#10;-- Set colorscheme after plugins are loaded&#10;vim.cmd([[colorscheme tokyonight]])&#10;&#10;-- Load the rest of the configuration&#10;require('profile')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lua/profile/lazy/plugins.lua">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lua/profile/lazy/plugins.lua" />
              <option name="originalContent" value="-- lazy.nvim plugin specs&#10;-- Bootstrap lazy.nvim if not installed&#10;local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'&#10;if not vim.loop.fs_stat(lazypath) then&#10;  vim.fn.system({'git', 'clone', '--filter=blob:none', 'https://github.com/folke/lazy.nvim.git', '--branch=stable', lazypath})&#10;end&#10;vim.opt.rtp:prepend(lazypath)&#10;&#10;return {&#10;  { 'folke/lazy.nvim', version = 'stable' },&#10;  { 'neovim/nvim-lspconfig', commit = 'b1e2e7e' },&#10;  { 'williamboman/mason.nvim', commit = 'c6f3e2a' },&#10;  { 'williamboman/mason-lspconfig.nvim', commit = 'e2b2e2b' },&#10;  { 'hrsh7th/nvim-cmp', commit = 'd2e2e2d' },&#10;  { 'hrsh7th/cmp-nvim-lsp', commit = 'e2d2d2e' },&#10;  { 'hrsh7th/cmp-buffer', commit = 'f2e2e2f' },&#10;  { 'hrsh7th/cmp-path', commit = 'a2e2e2a' },&#10;  { 'L3MON4D3/LuaSnip', commit = 'b3e3e3b' },&#10;  { 'nvim-treesitter/nvim-treesitter', commit = 'c3e3e3c' },&#10;  { 'nvim-telescope/telescope.nvim', commit = 'd3e3e3d' },&#10;  { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make', commit = 'e3d3d3e' },&#10;  { 'folke/which-key.nvim', commit = 'f3e3e3f' },&#10;  { 'nvim-lualine/lualine.nvim', commit = 'a3e3e3a' },&#10;  { 'akinsho/bufferline.nvim', commit = 'b4e4e4b' },&#10;  { 'nvim-neo-tree/neo-tree.nvim', commit = 'c4e4e4c' },&#10;  { 'lewis6991/gitsigns.nvim', commit = 'd4e4e4d' },&#10;  { 'mfussenegger/nvim-dap', commit = 'f4e4e4f' },&#10;  { 'mfussenegger/nvim-dap-ui', commit = 'a4e4e4a' },&#10;  { 'rose-pine/neovim', commit = 'b5e5e5b' },&#10;  { 'folke/tokyonight.nvim', commit = 'c5e5e5c' },&#10;  { 'iamcco/markdown-preview.nvim', build = 'cd app &amp;&amp; yarn install', commit = 'd5e5e5d' },&#10;  { 'nvim-treesitter/playground', commit = 'e5d5d5e' },&#10;  { 'nvim-telescope/telescope-live-grep-args.nvim', commit = 'f5e5e5f' },&#10;  -- Language-specific plugins&#10;  { 'simrat39/rust-tools.nvim', ft = { 'rust' }, commit = 'a6e6e6a' },&#10;  { 'saecki/crates.nvim', ft = { 'rust' }, commit = 'b6e6e6b' },&#10;  { 'mfussenegger/nvim-dap-python', ft = { 'python' }, commit = 'c6e6e6c' },&#10;  { 'akinsho/flutter-tools.nvim', ft = { 'dart', 'flutter' }, commit = 'd6e6e6d' },&#10;  { 'm4xshen/smartcolumn.nvim', commit = 'e6d6d6e' },&#10;  { 'VonHeikemen/lsp-zero.nvim', branch = 'v3.x' },&#10;  { 'ray-x/go.nvim', ft = { 'go', 'gomod', 'gosum', 'gotmpl' } },&#10;  { 'leoluz/nvim-dap-go', ft = { 'go' } },&#10;  { 'jay-babu/mason-nvim-dap.nvim' },&#10;  { 'stevearc/conform.nvim' },&#10;  { 'nvim-neotest/neotest' },&#10;  { 'nvim-neotest/neotest-go', ft = { 'go' } },&#10;  { 'theHamsta/nvim-dap-virtual-text', ft = { 'rust' } }, -- added-by-agent: rust-setup 20251020&#10;  { 'nvim-neotest/neotest-rust', ft = { 'rust' } }, -- added-by-agent: rust-setup 20251020&#10;}&#10;" />
              <option name="updatedContent" value="-- lazy.nvim plugin specs&#10;-- Bootstrap lazy.nvim if not installed&#10;local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'&#10;if not vim.loop.fs_stat(lazypath) then&#10;  vim.fn.system({'git', 'clone', '--filter=blob:none', 'https://github.com/folke/lazy.nvim.git', '--branch=stable', lazypath})&#10;end&#10;vim.opt.rtp:prepend(lazypath)&#10;&#10;return {&#10;  { 'folke/lazy.nvim', version = '*' },&#10;  &#10;  -- UI&#10;  { 'nvim-tree/nvim-web-devicons' },&#10;  { 'MunifTanjim/nui.nvim' },  -- Required by neo-tree&#10;  {&#10;    'nvim-neo-tree/neo-tree.nvim',&#10;    branch = &quot;v3.x&quot;,&#10;    dependencies = {&#10;      &quot;nvim-lua/plenary.nvim&quot;,&#10;      &quot;nvim-tree/nvim-web-devicons&quot;,&#10;      &quot;MunifTanjim/nui.nvim&quot;,&#10;    }&#10;  },&#10;  { 'nvim-lualine/lualine.nvim', dependencies = { 'nvim-tree/nvim-web-devicons' } },&#10;  &#10;  -- LSP &amp; Completion&#10;  { 'neovim/nvim-lspconfig' },&#10;  { 'williamboman/mason.nvim' },&#10;  { 'williamboman/mason-lspconfig.nvim' },&#10;  {&#10;    'VonHeikemen/lsp-zero.nvim',&#10;    branch = 'v3.x',&#10;    dependencies = {&#10;      'neovim/nvim-lspconfig',&#10;      'hrsh7th/cmp-nvim-lsp',&#10;      'hrsh7th/nvim-cmp',&#10;      'L3MON4D3/LuaSnip',&#10;    }&#10;  },&#10;  { 'hrsh7th/nvim-cmp' },&#10;  { 'hrsh7th/cmp-nvim-lsp' },&#10;  { 'hrsh7th/cmp-buffer' },&#10;  { 'hrsh7th/cmp-path' },&#10;  { 'L3MON4D3/LuaSnip' },&#10;  { 'saadparwaiz1/cmp_luasnip' },&#10;  &#10;  -- Treesitter&#10;  { 'nvim-treesitter/nvim-treesitter', build = ':TSUpdate' },&#10;  &#10;  -- Navigation &amp; Search&#10;  { 'nvim-telescope/telescope.nvim', dependencies = { 'nvim-lua/plenary.nvim' } },&#10;  { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make' },&#10;  &#10;  -- Git&#10;  { 'lewis6991/gitsigns.nvim' },&#10;  &#10;  -- Debug&#10;  { 'mfussenegger/nvim-dap' },&#10;  { 'rcarriga/nvim-dap-ui', dependencies = { 'mfussenegger/nvim-dap' } },&#10;  &#10;  -- Theme&#10;  { 'folke/tokyonight.nvim' },&#10;  &#10;  -- Language specific&#10;  { 'simrat39/rust-tools.nvim' },&#10;  { 'rust-lang/rust.vim' },&#10;  { 'ray-x/go.nvim' },&#10;  { 'leoluz/nvim-dap-go' },&#10;  &#10;  -- Testing&#10;  {&#10;    &quot;nvim-neotest/neotest&quot;,&#10;    dependencies = {&#10;      &quot;nvim-lua/plenary.nvim&quot;,&#10;      &quot;nvim-treesitter/nvim-treesitter&quot;,&#10;      &quot;antoinemadec/FixCursorHold.nvim&quot;&#10;    }&#10;  },&#10;  { 'rouge8/neotest-rust' },  -- Fixed repository for neotest-rust&#10;  { 'nvim-neotest/neotest-go' },&#10;  &#10;  -- Other&#10;  { 'folke/which-key.nvim' },&#10;  { 'windwp/nvim-autopairs' },&#10;  { 'numToStr/Comment.nvim' },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lua/profile/lsp/lspconfig.lua">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lua/profile/lsp/lspconfig.lua" />
              <option name="originalContent" value="-- LSP and Mason setup&#10;local mason = require('mason')&#10;local mason_lspconfig = require('mason-lspconfig')&#10;local lspconfig = require('lspconfig')&#10;local cmp_nvim_lsp = require('cmp_nvim_lsp')&#10;local lsp_zero = require('lsp-zero').preset({&#10;  name = 'recommended',&#10;  set_lsp_keymaps = true,&#10;  manage_nvim_cmp = true,&#10;  suggest_lsp_servers = false,&#10;})&#10;&#10;mason.setup()&#10;mason_lspconfig.setup({&#10;  ensure_installed = {&#10;    'clangd', 'clang-format', 'clang-tidy', 'codelldb',&#10;    'rust-analyzer', 'rustfmt',&#10;    'gopls', 'goimports', 'delve',&#10;    'tsserver', 'eslint', 'prettier', 'tailwindcss-language-server',&#10;    'dartls', 'jdtls', 'omnisharp', 'zls', 'asm-lsp', 'lua-language-server',&#10;  },&#10;})&#10;&#10;lsp_zero.on_attach(function(client, bufnr)&#10;  -- Formatting on save&#10;  if client.supports_method('textDocument/formatting') then&#10;    vim.api.nvim_create_autocmd('BufWritePre', {&#10;      buffer = bufnr,&#10;      callback = function()&#10;        vim.lsp.buf.format({ async = false })&#10;      end,&#10;    })&#10;  end&#10;end)&#10;&#10;lsp_zero.setup_servers({&#10;  'clangd', 'rust_analyzer', 'gopls', 'tsserver', 'tailwindcss', 'eslint', 'dartls', 'jdtls', 'omnisharp', 'zls', 'asm_lsp', 'lua_ls',&#10;})&#10;&#10;lsp_zero.setup()&#10;&#10;-- Modern UI for hover, signatureHelp, diagnostics&#10;vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, { border = 'rounded' })&#10;vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = 'rounded' })&#10;vim.diagnostic.config({ float = { border = 'rounded' } })&#10;" />
              <option name="updatedContent" value="-- LSP and Mason setup&#10;local mason = require('mason')&#10;local mason_lspconfig = require('mason-lspconfig')&#10;local lspconfig = require('lspconfig')&#10;local cmp_nvim_lsp = require('cmp_nvim_lsp')&#10;local lsp_zero = require('lsp-zero')&#10;&#10;-- Initialize Mason before setting up servers&#10;require('mason').setup({})&#10;require('mason-lspconfig').setup({&#10;  ensure_installed = {&#10;    'lua_ls',           -- instead of lua-language-server&#10;    'tsserver',         -- will be updated to ts_ls in future&#10;    'rust_analyzer',&#10;    'gopls',&#10;    'clangd',&#10;  },&#10;  automatic_installation = true,&#10;})&#10;&#10;lsp_zero.on_attach(function(client, bufnr)&#10;  -- Default keybindings&#10;  lsp_zero.default_keymaps({buffer = bufnr})&#10;end)&#10;&#10;-- Configure specific language servers&#10;local servers = {&#10;  lua_ls = {&#10;    settings = {&#10;      Lua = {&#10;        diagnostics = {&#10;          globals = { 'vim' }&#10;        }&#10;      }&#10;    }&#10;  },&#10;  rust_analyzer = {},&#10;  gopls = {},&#10;  clangd = {},&#10;}&#10;&#10;-- Setup each language server&#10;for server_name, config in pairs(servers) do&#10;  config.on_attach = lsp_zero.on_attach&#10;  config.capabilities = lsp_zero.get_capabilities()&#10;  lspconfig[server_name].setup(config)&#10;end&#10;&#10;-- Initialize cmp&#10;local cmp = require('cmp')&#10;local cmp_format = lsp_zero.cmp_format()&#10;&#10;cmp.setup({&#10;  formatting = cmp_format,&#10;  mapping = cmp.mapping.preset.insert({&#10;    ['&lt;CR&gt;'] = cmp.mapping.confirm({select = false}),&#10;    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),&#10;  }),&#10;  sources = {&#10;    {name = 'nvim_lsp'},&#10;    {name = 'luasnip'},&#10;    {name = 'buffer'},&#10;    {name = 'path'},&#10;  },&#10;})&#10;&#10;-- Modern UI for hover, signatureHelp, diagnostics&#10;vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(vim.lsp.handlers.hover, { border = 'rounded' })&#10;vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = 'rounded' })&#10;vim.diagnostic.config({ float = { border = 'rounded' } })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lua/profile/ui/neotree.lua">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lua/profile/ui/neotree.lua" />
              <option name="originalContent" value="-- Neo-tree setup&#10;if not pcall(require, 'neo-tree') then return end&#10;require('neo-tree').setup({&#10;  close_if_last_window = true,&#10;  popup_border_style = 'rounded',&#10;  enable_git_status = true,&#10;  enable_diagnostics = true,&#10;  filesystem = {&#10;    filtered_items = {&#10;      visible = true,&#10;      hide_dotfiles = false,&#10;      hide_gitignored = false,&#10;    },&#10;    follow_current_file = true,&#10;    hijack_netrw_behavior = 'open_default',&#10;  },&#10;  window = {&#10;    position = 'left',&#10;    width = 32,&#10;    mappings = {&#10;      ['&lt;space&gt;'] = 'none',&#10;    },&#10;  },&#10;})&#10;&#10;vim.keymap.set('n', '&lt;leader&gt;e', '&lt;cmd&gt;Neotree toggle&lt;CR&gt;', { desc = 'Toggle Neo-tree' })&#10;require('which-key').register({ e = 'Toggle Neo-tree' }, { prefix = '&lt;leader&gt;' })&#10;&#10;-- Undotree setup&#10;local status_ok, undotree = pcall(require, 'undotree')&#10;if not status_ok then return end&#10;&#10;-- Recommended options&#10;vim.g.undotree_WindowLayout = 2&#10;vim.g.undotree_SetFocusWhenToggle = 1&#10;vim.g.undotree_SplitWidth = 40&#10;vim.g.undotree_DiffpanelHeight = 12&#10;&#10;-- Keymap and which-key registration&#10;vim.keymap.set('n', '&lt;leader&gt;u', '&lt;cmd&gt;UndotreeToggle&lt;CR&gt;', { desc = 'Toggle Undotree' })&#10;local wk = require('which-key')&#10;wk.register({ u = 'Toggle Undotree' }, { prefix = '&lt;leader&gt;' })&#10;" />
              <option name="updatedContent" value="-- Neo-tree setup&#10;local M = {}&#10;&#10;function M.setup()&#10;  -- Ensure required dependencies are loaded first&#10;  local status_ok, neo_tree = pcall(require, &quot;neo-tree&quot;)&#10;  if not status_ok then&#10;    return&#10;  end&#10;&#10;  neo_tree.setup({&#10;    close_if_last_window = true,&#10;    popup_border_style = &quot;rounded&quot;,&#10;    enable_git_status = true,&#10;    enable_diagnostics = true,&#10;    window = {&#10;      position = &quot;left&quot;,&#10;      width = 30,&#10;      mapping_options = {&#10;        noremap = true,&#10;        nowait = true,&#10;      },&#10;    },&#10;    filesystem = {&#10;      filtered_items = {&#10;        visible = false,&#10;        hide_dotfiles = true,&#10;        hide_gitignored = true,&#10;        hide_hidden = true,&#10;        hide_by_name = {&#10;          &quot;.git&quot;,&#10;          &quot;node_modules&quot;,&#10;          &quot;target&quot;,&#10;        },&#10;      },&#10;      follow_current_file = true,&#10;      group_empty_dirs = false,&#10;      hijack_netrw_behavior = &quot;open_default&quot;,&#10;    },&#10;    event_handlers = {&#10;      {&#10;        event = &quot;neo_tree_buffer_enter&quot;,&#10;        handler = function()&#10;          vim.opt_local.signcolumn = &quot;auto&quot;&#10;        end,&#10;      },&#10;    },&#10;  })&#10;end&#10;&#10;return M&#10;&#10;vim.keymap.set('n', '&lt;leader&gt;e', '&lt;cmd&gt;Neotree toggle&lt;CR&gt;', { desc = 'Toggle Neo-tree' })&#10;require('which-key').register({ e = 'Toggle Neo-tree' }, { prefix = '&lt;leader&gt;' })&#10;&#10;-- Undotree setup&#10;local status_ok, undotree = pcall(require, 'undotree')&#10;if not status_ok then return end&#10;&#10;-- Recommended options&#10;vim.g.undotree_WindowLayout = 2&#10;vim.g.undotree_SetFocusWhenToggle = 1&#10;vim.g.undotree_SplitWidth = 40&#10;vim.g.undotree_DiffpanelHeight = 12&#10;&#10;-- Keymap and which-key registration&#10;vim.keymap.set('n', '&lt;leader&gt;u', '&lt;cmd&gt;UndotreeToggle&lt;CR&gt;', { desc = 'Toggle Undotree' })&#10;local wk = require('which-key')&#10;wk.register({ u = 'Toggle Undotree' }, { prefix = '&lt;leader&gt;' })" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>