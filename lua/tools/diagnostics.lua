-- Lightweight diagnostics runner for this Neovim config
-- Usage: require('tools.diagnostics').run()
--local M = {}
--
--local function write(line)
--	vim.api.nvim_out_write(line .. "\n")
--end
--
--local function check_require(name)
--	local ok, mod_or_err = pcall(require, name)
--	if ok then
--		return true, mod_or_err
--	else
--		return false, tostring(mod_or_err)
--	end
--end
--
--local modules_to_check = {
--	-- Core tooling
--	"lspconfig",
--	"mason",
--	--    "mason-lspconfig",
--	"cmp_nvim_lsp",
--	"neo-tree",
--	"nvim-treesitter",
--	"nvim-cmp",
--	--	"which-key",
--	"noice",
--	"notify",
--	"telescope",
--	"gitsigns",
--	"conform",
--	"mini.ai",
--	"mason-tool-installer",
--
--	-- Local modules
--	"core.lsp",
--	"core.lsp_setup",
--	"tools.mason",
--	"ui",
--}
--
--local lsp_servers_to_check = { "pyright", "tsserver", "clangd", "lua_ls", "gopls", "rust_analyzer" }
--
--function M.run()
--	write("=== Neovim config diagnostics ===")
--
--	for _, name in ipairs(modules_to_check) do
--		local ok, mod = check_require(name)
--		if ok then
--			write(string.format("MODULE OK: %-25s -> %s", name, type(mod)))
--		else
--			write(string.format("MODULE MISSING: %-25s -> %s", name, mod))
--		end
--	end
--
--	-- Check lspconfig servers
--	local ok_lsp, lspconfig = pcall(require, "lspconfig")
--	if not ok_lsp then
--		write("LSPCONFIG: not available, cannot verify LSP servers")
--	else
--		for _, srv in ipairs(lsp_servers_to_check) do
--			if lspconfig[srv] then
--				write(string.format("LSP SERVER: %-12s -> available", srv))
--			else
--				write(string.format("LSP SERVER: %-12s -> not available in lspconfig", srv))
--			end
--		end
--	end
--
--	-- Quick checks for our own modules behavior (safely)
--	local ok_core_lsp, core_lsp = pcall(require, "core.lsp")
--	if not ok_core_lsp then
--		write("CORE.LSP: require failed -> " .. tostring(core_lsp))
--	else
--		local ok, err = pcall(core_lsp.setup)
--		if ok then
--			write("CORE.LSP: setup() -> OK (ran safely)")
--		else
--			write("CORE.LSP: setup() -> FAILED -> " .. tostring(err))
--		end
--	end
--
--	local ok_ui, ui = pcall(require, "ui")
--	if not ok_ui then
--		write("UI: require failed -> " .. tostring(ui))
--	else
--		local ok, err = pcall(ui.setup)
--		if ok then
--			write("UI: setup() -> OK (ran safely)")
--		else
--			write("UI: setup() -> FAILED -> " .. tostring(err))
--		end
--	end
--
--	write("=== Diagnostics complete ===")
--end
--
--return M
